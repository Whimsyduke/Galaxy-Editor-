//==================================================================================================
//  Test
//==================================================================================================

int magicValue = 0;

bool MagicValueHelper(int a) {
    magicValue=a;
    return true;
}
int MagicValue() {
    MagicValueHelper;
    if (MagicValueHelper) {
    }
    TriggerDebugOutput(1, StringToText(IntToString(magicValue)), true);
    return magicValue;
}


//==================================================================================================


//struct MemWaste { 
//    int[10] a; 
//};
//MemWaste[1] mema;
//
//struct StructVals { 
//    unit[100] a; 
//    bool[11] b;
//    string[63][5] c;
//    bool d;
//    wave[41][2] e;
//    bool f;
//};
//StructVals[3] memb;


//==================================================================================================


//
//struct Foo { int 0; };
//
//void FooParam (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, int n, int o, int p, int q, int r, int s, int t, int u, int v, int w, int x, int y, int z) {
//    int aa;
//    int bb;
//
//    bb = aa+5;
//}
//
//void FooParamBar () {
//    FooParam(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5);
//}
//
//typedef int typeint;
//typeint b = 0;
//
//typedef fixed typefixed;
//typefixed c = 0.0;
//
//struct Foo { typeint[10] d; };
//
//int k = 0;
//
//struct Bar { Foo[10] e; };
//
//struct FooB { Bar[10] f; };
//
//struct Heh { FooB[100] f; };
//
//int f = 0;


//==================================================================================================


////bool[1048576] sadf;
////bool[524288] sadf2;
////bool[2100] morejunk;
//
////typedef bool TestGalaxy;
////TestGalaxy d = true;
//
////const int a = 0;
////typedef struct {
////    int a;
////} Foo;
////
////Foo bar;
//
////struct Foo { int b; };
//
////struct MemWaste { int[100000] a; };
////
////MemWaste[100000] mema;
////


//==================================================================================================


//struct loca { int j; };
//
//typedef int asdf;
//
//int depth = 0;
//int depth2 = 0;
//bool deeper = true;
//
//void TestGalaxyToo () {
//    unitgroup a1 = UnitGroupEmpty();
//    unitgroup a2 = UnitGroupEmpty();
//    unitgroup a3 = UnitGroupEmpty();
//    unitgroup a4 = UnitGroupEmpty();
//    unitgroup a5 = UnitGroupEmpty();
//    unitgroup a6 = UnitGroupEmpty();
//    unitgroup a7 = UnitGroupEmpty();
//    unitgroup a8 = UnitGroupEmpty();
//    unitgroup a9 = UnitGroupEmpty();
//    fixed a = 520458.21349;
//    fixed b = 519214.602;
//    fixed c = a*b;
//    fixed d = -524287.999;
//    //fixed e = -0.000244140625;
//    fixed e = -1.0;
//    fixed f = d/e;
//    fixed g = d % e;
//    int h = -2147483647 - 1;
//    int i = -1;
//    //int j = h / i;
//    int k = h % i;
//    int l = 1;
//    int m = 8;
//    int n = 4;
//    int o = 1<<m / n;
//    int p = i / o;
//    Foo bar;
//    MemWaste[100000] memb;
//
//    unitgroup a10 = UnitGroup(null, c_playerAny, RegionCircle(Point(0,0), 524288), UnitFilter(0,0,0,0), 0);
//
//    bar.name = "Hello";
//    bar.val = 5;
//
//    f = 0.0;
//    DebugFixed(f);
//    DebugString("\n");
//
//    f = 1;
//    f *= 2;
//    DebugFixed(f);
//    DebugString("\n");
//
//
//    f = 1;
//    f /= 2;
//    DebugFixed(f);
//    DebugString("\n");
//
//    
//    f = 1;
//    f /= 4;
//    DebugFixed(f);
//    DebugString("\n");
//
//    f = 2;
//    f -= 1;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2;
//    f += 1;
//    DebugFixed(f);
//    DebugString("\n");
//
//    
//    f = 1 * 2;
//    DebugFixed(f);
//    DebugString("\n");
//
//
//    f = 4 / 2;
//    DebugFixed(f);
//    DebugString("\n");
//
//    f = 2 - 1;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2 + 1;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2;
//    g = 1;
//    f += g;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2;
//    g = 1;
//    f *= g;
//    DebugFixed(f);
//    DebugString("\n");
//
//    
//    f = 4;
//    g = 2;
//    f /= g;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2;
//    g = 1;
//    f -= g;
//    DebugFixed(f);
//    DebugString("\n");
//
//    f = 1;
//    f += (4 + 2);
//    DebugFixed(f);
//    DebugString("\n");
//
//    DebugString("\n");
//}
//


//==================================================================================================

//
////--------------------------------------------------------------------------------------------------
//// Library Initialization
////--------------------------------------------------------------------------------------------------
//void FooInitLibs () {
//    libNtve_InitLib();
//}
//
////--------------------------------------------------------------------------------------------------
//// Global Structures
////--------------------------------------------------------------------------------------------------
//struct gs_Record1Type {
//    unitgroup lv_unitGroup;
//};
//
//struct gs_Record2Type {
//    timer lv_timer;
//    unitgroup[21] lv_unitGroup;
//    gs_Record1Type[41] lv_record1;
//};
//
//struct gs_Record3Type {
//    gs_Record2Type[21] lv_record2;
//};
//
////--------------------------------------------------------------------------------------------------
//// Global Variables
////--------------------------------------------------------------------------------------------------
//playergroup[17] gv_playerGroup;
//gs_Record2Type[22] gv_record2;
//gs_Record3Type[22] gv_record3;
//timer[21] gv_timer;
//unitgroup[21][21] gv_unitGroup;
//
//void FooInitGlobals () {
//    int init_i;
//    int init_j;
//    int init_i1;
//    int init_i2;
//
//    init_i = 0;
//    while (init_i <= 16) {
//        gv_playerGroup[init_i] = PlayerGroupEmpty();
//        init_i = init_i + 1;
//    }
//    init_i = 0;
//    while (init_i <= 21) {
//        gv_record2[init_i].lv_timer = TimerCreate();
//        init_i1 = 0;
//        while (init_i1 <= 20) {
//            gv_record2[init_i].lv_unitGroup[init_i1] = UnitGroupEmpty();
//            init_i1 = init_i1 + 1;
//        }
//        init_i1 = 0;
//        while (init_i1 <= 40) {
//            gv_record2[init_i].lv_record1[init_i1].lv_unitGroup = UnitGroupEmpty();
//            init_i1 = init_i1 + 1;
//        }
//        init_i = init_i + 1;
//    }
//    init_i = 0;
//    while (init_i <= 21) {
//        init_i1 = 0;
//        while (init_i1 <= 20) {
//            gv_record3[init_i].lv_record2[init_i1].lv_timer = TimerCreate();
//            init_i2 = 0;
//            while (init_i2 <= 20) {
//                gv_record3[init_i].lv_record2[init_i1].lv_unitGroup[init_i2] = UnitGroupEmpty();
//                init_i2 = init_i2 + 1;
//            }
//            init_i2 = 0;
//            while (init_i2 <= 40) {
//                gv_record3[init_i].lv_record2[init_i1].lv_record1[init_i2].lv_unitGroup = UnitGroupEmpty();
//                init_i2 = init_i2 + 1;
//            }
//            init_i1 = init_i1 + 1;
//        }
//        init_i = init_i + 1;
//    }
//    init_i = 0;
//    while (init_i <= 20) {
//        gv_timer[init_i] = TimerCreate();
//        init_i = init_i + 1;
//    }
//    init_i = 0;
//    while (init_i <= 20) {
//        init_j = 0;
//        while (init_j <= 20) {
//            gv_unitGroup[init_i][init_j] = UnitGroupEmpty();
//            init_j = init_j + 1;
//        }
//        init_i = init_i + 1;
//    }
//}
//
////--------------------------------------------------------------------------------------------------
//// Map Initialization
////--------------------------------------------------------------------------------------------------
//void FooInitMap () {
//    FooInitLibs();
//    FooInitGlobals();
//}


//==================================================================================================


//
//struct Foo { string name; int val; };
//
//int Bar (int a) {
//    return (a + 1);
//}
//
//void TestGalaxy () {
//    unitgroup a1 = UnitGroupEmpty();
//    unitgroup a2 = UnitGroupEmpty();
//    unitgroup a3 = UnitGroupEmpty();
//    unitgroup a4 = UnitGroupEmpty();
//    unitgroup a5 = UnitGroupEmpty();
//    unitgroup a6 = UnitGroupEmpty();
//    unitgroup a7 = UnitGroupEmpty();
//    unitgroup a8 = UnitGroupEmpty();
//    unitgroup a9 = UnitGroupEmpty();
//    fixed a = 520458.21349;
//    fixed b = 519214.602;
//    fixed c = a*b;
//    fixed d = -524287.999;
//    //fixed e = -0.000244140625;
//    fixed e = -1.0;
//    fixed f = d/e;
//    fixed g = d % e;
//    int h = -2147483647 - 1;
//    int i = -1;
//    //int j = h / i;
//    int k = h % i;
//    int l = 1;
//    int m = 8;
//    int n = 4;
//    int o = 1<<m / n;
//    int p = i / o;
//    Foo bar;
//    //MemWaste[100000] memb;
//    //MemWaste memb;
//
//    unitgroup a10 = UnitGroup(null, c_playerAny, RegionCircle(Point(0,0), 524288), UnitFilter(0,0,0,0), 0);
//
//    bar.name = "Hello";
//    bar.val = 5;
//
//    f = 0.0;
//    DebugFixed(f);
//    DebugString("\n");
//
//    f = 1;
//    f *= 2;
//    DebugFixed(f);
//    DebugString("\n");
//
//
//    f = 1;
//    f /= 2;
//    DebugFixed(f);
//    DebugString("\n");
//
//    
//    f = 1;
//    f /= 4;
//    DebugFixed(f);
//    DebugString("\n");
//
//    f = 2;
//    f -= 1;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2;
//    f += 1;
//    DebugFixed(f);
//    DebugString("\n");
//
//    
//    f = 1 * 2;
//    DebugFixed(f);
//    DebugString("\n");
//
//
//    f = 4 / 2;
//    DebugFixed(f);
//    DebugString("\n");
//
//    f = 2 - 1;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2 + 1;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2;
//    g = 1;
//    f += g;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2;
//    g = 1;
//    f *= g;
//    DebugFixed(f);
//    DebugString("\n");
//
//    
//    f = 4;
//    g = 2;
//    f /= g;
//    DebugFixed(f);
//    DebugString("\n");
//    
//    f = 2;
//    g = 1;
//    f -= g;
//    DebugFixed(f);
//    DebugString("\n");
//
//    f = 1;
//    f += (4 + 2);
//    DebugFixed(f);
//    DebugString("\n");
//
//    DebugString("\n");
//}


//==================================================================================================


//
//void TestGalaxy () {
//    bool[10000] foosadf; 
//    int a = 1;
//    int b = 2;
//    int c = 4;
//    int d = 5;
//    int e = 6;
//    //Heh[10] a;
//    //loca[100] b;
//    
//    //typeint a;
//    //a = typeint;
//
//    //if (foosadf[20000] == true) {
//    //    DebugString("True\n");
//    //} else {
//    //    DebugString("False\n");
//    //}
//
//    if (depth2 == 0) {
//        DebugString("Start\n");
//    }
//
//    depth2 += 1;
//
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//    //depth += ((((a * e) / b) + depth) - d) / c;
//
//        
//    DebugString("Depth:  ");
//    DebugInt(depth2);
//    DebugString("\n");
//
//    if (depth2 >= 32) {
//        deeper = false;
//    }
//
//    if (deeper) {
//        TestGalaxy();
//    }
//
//    depth2 -= 1;
//
//    if (depth2 == 0) {
//        deeper = true;       
//        DebugString("End\n");
//    }
//}


//==================================================================================================

